import useFipeSearch from '@/hooks/useFipeSearch'
import {
  Autocomplete,
  Box,
  Button,
  CircularProgress,
  Container,
  Grid,
  Paper,
  TextField,
} from '@mui/material'
import axios from 'axios'
import { GetStaticProps } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { useState, useEffect } from 'react'

interface CarRequestProps {
  codigo: string
  nome: string
}

interface CarProps {
  nome: string
  codigo: string
}
interface HomeProps {
  carBrandsList: CarProps[]
}

export default function Home({ carBrandsList }: HomeProps) {
  const {
    carList,
    modelList,
    isLoading,
    error,
    selectCar,
    selectModel,
    selectYear,
    yearList,
  } = useFipeSearch()
  const [selectedBrand, setSelectedBrand] = useState<any>(null)
  const [selectedModel, setSelectedModel] = useState<any>(null)
  const [selectedYear, setSelectedYear] = useState<any>(null)

  const router = useRouter()

  useEffect(() => {
    if (selectedBrand) {
      selectCar(selectedBrand.codigo)
    }
  }, [selectedBrand, selectCar])

  useEffect(() => {
    if (selectedModel) {
      selectModel(selectedModel.codigo)
    }
  }, [selectedModel, selectModel])

  useEffect(() => {
    if (selectedYear) {
      selectYear(selectedYear.codigo)
    }
  }, [selectedYear, selectYear])

  const handleBrandChange = (event: any, value: string) => {
    setSelectedBrand(value)
    setSelectedModel(null)
    setSelectedYear(null)
  }

  const handleModelChange = (event: any, value: string) => {
    setSelectedModel(value)
  }

  const handleYearChange = (event: any, value: string) => {
    setSelectedYear(value)
  }

  // function handleGetFipeValue() {
  //   router.push('/result', {
  //     pathname: '/result',
  //     query: {
  //       brand: selectedBrand.codigo,
  //       model: selectedModel.codigo,
  //       year: selectedYear.codigo,
  //     },
  //   })
  // }

  // if (isLoading) {
  //   return <CircularProgress />
  // }

  if (error) {
    return <div>Error: {error.message}</div>
  }

  return (
    <>
      <Head>
        <title>Front-End Test - Tabela Fipe</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container
          component="main"
          maxWidth="lg"
          sx={{
            height: '100vh',
            width: '100vw',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
          }}
        >
          <Paper
            sx={{
              maxWidth: '40rem',
              width: '100%',
              my: { xs: 3, md: 6 },
              p: '2rem 3rem',
            }}
          >
            <h1>Tabela Fipe</h1>
            <p>Consulte o valor de um veículo de forma gratuita</p>

            <div>
              <Autocomplete
                options={carBrandsList}
                getOptionLabel={(option) => option.nome}
                value={selectedBrand}
                onChange={handleBrandChange}
                renderInput={(params) => (
                  <TextField {...params} label="Marca" />
                )}
              />
              <Autocomplete
                options={modelList}
                getOptionLabel={(option) => option.nome}
                value={selectedModel}
                onChange={handleModelChange}
                renderInput={(params) => (
                  <TextField {...params} label="Modelo" />
                )}
                disabled={!selectedBrand}
              />
              <Autocomplete
                options={yearList} // Example years
                getOptionLabel={(option) => option.nome}
                value={selectedYear}
                onChange={handleYearChange}
                renderInput={(params) => <TextField {...params} label="Ano" />}
                disabled={!selectedModel}
              />

              <Link
                href={{
                  pathname: '/vehicle/[slug]',
                  query: {
                    slug: selectedBrand?.nome,
                    marca: selectedBrand?.codigo,
                    modelo: selectedModel?.codigo,
                    ano: selectedYear?.codigo,
                  },
                }}
                // href={`/vehicle/${selectedBrand?.codigo}`}
              >
                <Button variant="contained" disabled={!selectedYear}>
                  Consultar Preço
                </Button>
              </Link>
            </div>
          </Paper>
        </Container>
      </main>
    </>
  )
}

export async function getStaticProps() {
  const response = await axios.get(
    'https://parallelum.com.br/fipe/api/v1/carros/marcas'
  )
  const carBrandsList = response.data

  return {
    props: {
      carBrandsList,
    },
    revalidate: 3600,
  }
}
